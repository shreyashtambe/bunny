from google.colab import files
uploaded=files.upload()

##########################################################################################

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import confusion_matrix,ConfusionMatrixDisplay,classification_report,accuracy_score, precision_score, recall_score, f1_score
data=pd.read_csv("Social_Network_Ads.csv")

##########################################################################################

data

##########################################################################################


data.info()

##########################################################################################


data.describe()


##########################################################################################

data.shape


##########################################################################################


data.isnull().sum()

##########################################################################################

x = data.iloc[:,2:4]

##########################################################################################

y = data.iloc[:,4]

##########################################################################################

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.25, random_state=42)


##########################################################################################

scale = StandardScaler()
x_train = scale.fit_transform(x_train)
x_test = scale.transform(x_test)



##########################################################################################

lr = LogisticRegression(random_state = 0)
lr.fit(x_train,y_train)
pred = lr.predict(x_test)



##########################################################################################


print(x_test[:10])
print('-'*15)
print(pred[:10])

##########################################################################################


matrix = confusion_matrix(y_test,pred,labels = lr.classes_)
print(matrix)

tp, fn, fp, tn = confusion_matrix(y_test,pred,labels=[1,0]).reshape(-1)


##########################################################################################

conf_matrix = ConfusionMatrixDisplay(confusion_matrix=matrix,display_labels=lr.classes_)
conf_matrix.plot(cmap=plt.cm.Blues)
plt.show()


##########################################################################################

print(classification_report(y_test,pred))



##########################################################################################




















